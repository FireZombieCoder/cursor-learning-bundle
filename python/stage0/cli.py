#!/usr/bin/env python3
"""
HelloBase CLI Tool

A command-line interface for interacting with the HelloBase smart contract.
This tool provides easy-to-use commands for reading and writing to the contract.

Author: Base Learning Curriculum
"""

import click
import os
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from hello_base import HelloBaseClient

console = Console()


@click.group()
@click.version_option(version="1.0.0")
def cli():
    """
    HelloBase CLI - Interact with your HelloBase contract on Base-Sepolia.
    
    This tool provides commands to read contract state, update messages,
    and view transaction history.
    """
    pass


@cli.command()
@click.argument('contract_address')
@click.option('--abi-path', help='Path to contract ABI JSON file')
def info(contract_address, abi_path):
    """Get comprehensive contract information."""
    try:
        client = HelloBaseClient(contract_address, abi_path)
        info = client.get_contract_info()
        
        # Create a nice table for contract info
        table = Table(title="üìã Contract Information", show_header=True, header_style="bold magenta")
        table.add_column("Property", style="cyan", no_wrap=True)
        table.add_column("Value", style="green")
        
        table.add_row("Contract Address", info['contract_address'])
        table.add_row("Your Account", info['account'])
        table.add_row("Balance", f"{info['balance_eth']:.4f} ETH")
        table.add_row("Current Message", info['current_message'])
        table.add_row("Message Length", f"{info['message_length']} bytes")
        table.add_row("Contract Owner", info['owner'])
        table.add_row("You are Owner", "‚úÖ Yes" if info['is_owner'] else "‚ùå No")
        table.add_row("Chain ID", str(info['chain_id']))
        
        console.print(table)
        
        # Show network info
        network_name = "Base-Sepolia" if info['chain_id'] == 84532 else "Base Mainnet" if info['chain_id'] == 8453 else f"Unknown ({info['chain_id']})"
        console.print(f"\nüåê Network: {network_name}")
        
    except Exception as e:
        console.print(f"[red]‚ùå Error: {e}[/red]")
        console.print("\n[yellow]üí° Troubleshooting tips:[/yellow]")
        console.print("‚Ä¢ Make sure your .env file is configured correctly")
        console.print("‚Ä¢ Verify the contract address is correct")
        console.print("‚Ä¢ Check that you have sufficient ETH balance")


@cli.command()
@click.argument('contract_address')
@click.argument('new_message')
@click.option('--abi-path', help='Path to contract ABI JSON file')
@click.option('--gas-limit', default=100000, help='Gas limit for the transaction')
def update(contract_address, new_message, abi_path, gas_limit):
    """Update the contract message."""
    try:
        client = HelloBaseClient(contract_address, abi_path)
        
        # Check if user is owner
        if not client.is_owner(client.account.address):
            console.print("[red]‚ùå Error: You are not the contract owner![/red]")
            console.print("[yellow]üí° Only the contract owner can update the message.[/yellow]")
            return
        
        # Check balance
        balance = client.get_balance_eth()
        if balance < 0.001:
            console.print(f"[red]‚ùå Error: Insufficient balance ({balance:.4f} ETH)[/red]")
            console.print("[yellow]üí° You need at least 0.001 ETH for transactions.[/yellow]")
            return
        
        console.print(f"[yellow]üîÑ Updating message to: {new_message}[/yellow]")
        console.print(f"[blue]üí∞ Balance: {balance:.4f} ETH[/blue]")
        console.print(f"[blue]‚õΩ Gas limit: {gas_limit}[/blue]")
        
        # Update message
        tx_hash = client.update_message(new_message, gas_limit)
        
        console.print(f"[green]‚úÖ Transaction sent successfully![/green]")
        console.print(f"[green]üîó Transaction hash: {tx_hash}[/green]")
        
        # Wait a moment and verify
        import time
        console.print("[yellow]‚è≥ Waiting for confirmation...[/yellow]")
        time.sleep(3)
        
        updated_message = client.get_message()
        console.print(f"[green]‚úÖ New message: {updated_message}[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Error: {e}[/red]")
        console.print("\n[yellow]üí° Troubleshooting tips:[/yellow]")
        console.print("‚Ä¢ Make sure you are the contract owner")
        console.print("‚Ä¢ Check that you have sufficient ETH balance")
        console.print("‚Ä¢ Verify the message is not empty")
        console.print("‚Ä¢ Ensure the new message is different from the current one")


@cli.command()
@click.argument('contract_address')
@click.option('--abi-path', help='Path to contract ABI JSON file')
@click.option('--count', default=5, help='Number of recent events to show')
def events(contract_address, abi_path, count):
    """Show recent contract events."""
    try:
        client = HelloBaseClient(contract_address, abi_path)
        events = client.get_events()
        
        if not events:
            console.print("[yellow]üì≠ No events found.[/yellow]")
            return
        
        # Create events table
        table = Table(title=f"üìú Recent Events (last {min(count, len(events))})", show_header=True, header_style="bold magenta")
        table.add_column("Block", style="cyan", no_wrap=True)
        table.add_column("Message", style="green")
        table.add_column("Updater", style="blue")
        table.add_column("Transaction", style="dim")
        
        for event in events[-count:]:
            # Truncate long messages
            message = event['args']['newMessage']
            if len(message) > 30:
                message = message[:27] + "..."
            
            # Truncate addresses
            updater = event['args']['updater']
            updater_short = updater[:6] + "..." + updater[-4:]
            
            tx_hash = event['transactionHash'].hex()
            tx_short = tx_hash[:8] + "..." + tx_hash[-6:]
            
            table.add_row(
                str(event['blockNumber']),
                message,
                updater_short,
                tx_short
            )
        
        console.print(table)
        
        # Show total events count
        console.print(f"\n[blue]üìä Total events: {len(events)}[/blue]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Error: {e}[/red]")


@cli.command()
@click.argument('contract_address')
@click.option('--abi-path', help='Path to contract ABI JSON file')
def balance(contract_address, abi_path):
    """Check your account balance."""
    try:
        client = HelloBaseClient(contract_address, abi_path)
        balance_eth = client.get_balance_eth()
        balance_wei = client.get_balance()
        
        # Create balance panel
        balance_text = Text()
        balance_text.append(f"{balance_eth:.6f} ETH\n", style="bold green")
        balance_text.append(f"{balance_wei:,} Wei", style="dim")
        
        panel = Panel(
            balance_text,
            title="üí∞ Account Balance",
            border_style="green"
        )
        
        console.print(panel)
        
        # Show recommendations
        if balance_eth < 0.001:
            console.print("\n[yellow]‚ö†Ô∏è  Low balance warning![/yellow]")
            console.print("[yellow]üí° You may need more ETH for transactions.[/yellow]")
            console.print("[yellow]üîó Get testnet ETH: https://docs.base.org/docs/tools/network-faucets/[/yellow]")
        elif balance_eth < 0.01:
            console.print("\n[blue]üí° Your balance is sufficient for basic transactions.[/blue]")
        else:
            console.print("\n[green]‚úÖ You have plenty of ETH for transactions![/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Error: {e}[/red]")


@cli.command()
@click.argument('contract_address')
@click.option('--abi-path', help='Path to contract ABI JSON file')
def test(contract_address, abi_path):
    """Run a quick test of contract functionality."""
    try:
        client = HelloBaseClient(contract_address, abi_path)
        
        console.print("[blue]üß™ Running contract tests...[/blue]")
        
        # Test 1: Read current message
        current_message = client.get_message()
        console.print(f"[green]‚úÖ Read message: {current_message}[/green]")
        
        # Test 2: Check owner
        owner = client.get_owner()
        is_owner = client.is_owner(client.account.address)
        console.print(f"[green]‚úÖ Contract owner: {owner}[/green]")
        console.print(f"[green]‚úÖ You are owner: {'Yes' if is_owner else 'No'}[/green]")
        
        # Test 3: Get message length
        length = client.get_message_length()
        console.print(f"[green]‚úÖ Message length: {length} bytes[/green]")
        
        # Test 4: Check balance
        balance = client.get_balance_eth()
        console.print(f"[green]‚úÖ Account balance: {balance:.4f} ETH[/green]")
        
        # Test 5: Get recent events
        events = client.get_events()
        console.print(f"[green]‚úÖ Found {len(events)} events[/green]")
        
        console.print("\n[green]üéâ All tests passed! Contract is working correctly.[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Test failed: {e}[/red]")


@cli.command()
def setup():
    """Show setup instructions for using the CLI."""
    instructions = """
üîß HelloBase CLI Setup Instructions

1. üìÅ Environment Setup:
   ‚Ä¢ Copy .env.example to .env
   ‚Ä¢ Set your PRIVATE_KEY (without 0x prefix)
   ‚Ä¢ Set BASE_SEPOLIA_RPC=https://sepolia.base.org
   ‚Ä¢ Set CHAIN_ID=84532

2. üí∞ Get Testnet ETH:
   ‚Ä¢ Visit: https://docs.base.org/docs/tools/network-faucets/
   ‚Ä¢ Connect your wallet and request ETH

3. üìù Deploy Contract:
   ‚Ä¢ Use Foundry to deploy HelloBase contract
   ‚Ä¢ Save the contract address

4. üöÄ Use CLI:
   ‚Ä¢ python python/stage0/cli.py info <CONTRACT_ADDRESS>
   ‚Ä¢ python python/stage0/cli.py update <CONTRACT_ADDRESS> "New Message"
   ‚Ä¢ python python/stage0/cli.py events <CONTRACT_ADDRESS>

5. üîç Verify on Explorer:
   ‚Ä¢ Check your contract on: https://sepolia.basescan.org
    """
    
    console.print(Panel(instructions, title="üìö Setup Guide", border_style="blue"))


if __name__ == "__main__":
    cli()
